{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { api, store } from '.';\nimport { APIRoute, AppRoute, AuthorizationStatus, TIMEOUT_SHOW_ERROR } from '../const';\nimport { errorHandle } from '../services/error-handle';\nimport { dropToken, saveDataUser, saveToken } from '../services/token';\nimport { loadComments, loadCurrentFilm, loadFavoriteFilms, loadAllFilms, loadMoreLikeFilms, loadPromoFilm, redirectToRoute, requireAuthorization, setError } from './action';\nexport const clearErrorAction = createAsyncThunk('film/clearError', () => {\n  setTimeout(() => store.dispatch(setError('')), TIMEOUT_SHOW_ERROR);\n});\nexport const checkAuthAction = createAsyncThunk('user/checkAuth', async () => {\n  try {\n    await api.get(APIRoute.Login);\n    store.dispatch(requireAuthorization(AuthorizationStatus.Auth));\n  } catch (error) {\n    errorHandle(error);\n    store.dispatch(requireAuthorization(AuthorizationStatus.NoAuth));\n  }\n});\nexport const loginAction = createAsyncThunk('user/login', async _ref => {\n  let {\n    login: email,\n    password\n  } = _ref;\n\n  try {\n    const {\n      data\n    } = await api.post(APIRoute.Login, {\n      email,\n      password\n    });\n    saveToken(data.token);\n    saveDataUser(JSON.stringify(data));\n    store.dispatch(requireAuthorization(AuthorizationStatus.Auth));\n    store.dispatch(redirectToRoute(AppRoute.Main));\n  } catch (error) {\n    errorHandle(error);\n    store.dispatch(requireAuthorization(AuthorizationStatus.NoAuth));\n  }\n});\nexport const logoutAction = createAsyncThunk('user/logout', async () => {\n  try {\n    await api.delete(APIRoute.Logout);\n    dropToken();\n    store.dispatch(requireAuthorization(AuthorizationStatus.NoAuth));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchFilmsAction = createAsyncThunk('films/fetchFilms', async () => {\n  try {\n    const {\n      data\n    } = await api.get(APIRoute.Films);\n    store.dispatch(loadAllFilms(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchCurrentFilmsAction = createAsyncThunk('film/fetchFilm', async id => {\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Films}/${id}`);\n    store.dispatch(loadCurrentFilm(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchShowMoreFilmsAction = createAsyncThunk('films/fetchShowMoreFilms', async id => {\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Films}/${id}/similar`);\n    store.dispatch(loadMoreLikeFilms(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchFavoriteFilmsAction = createAsyncThunk('films/fetchFavoriteFilms', async () => {\n  try {\n    const {\n      data\n    } = await api.get(APIRoute.Favorite);\n    store.dispatch(loadFavoriteFilms(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchPromoAction = createAsyncThunk('film/fetchPromo', async () => {\n  try {\n    const {\n      data\n    } = await api.get(APIRoute.Promo);\n    store.dispatch(loadPromoFilm(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const fetchCommentsAction = createAsyncThunk('comments/fetchComments', async id => {\n  try {\n    const {\n      data\n    } = await api.get(`${APIRoute.Comments}/${id}`);\n    store.dispatch(loadComments(data));\n  } catch (error) {\n    errorHandle(error);\n  }\n});\nexport const addCommentsAction = createAsyncThunk('comments/addComments', async _ref2 => {\n  let {\n    id,\n    dataComment\n  } = _ref2;\n\n  try {\n    await api.post(`${APIRoute.Comments}/${id}`, dataComment);\n    store.dispatch(redirectToRoute(`${APIRoute.Films}/${id}`));\n  } catch (error) {\n    errorHandle(error);\n    store.dispatch(requireAuthorization(AuthorizationStatus.NoAuth));\n  }\n});\nexport const addFilmStatusAction = createAsyncThunk('film/addFilmStatus', async _ref3 => {\n  let {\n    id,\n    status\n  } = _ref3;\n\n  try {\n    await api.post(`${APIRoute.Favorite}/${id}/${status}`);\n  } catch (error) {\n    errorHandle(error);\n  }\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Вячеслав/Projects/1479361-what-to-watch-9/src/store/api-action.ts"],"names":["createAsyncThunk","api","store","APIRoute","AppRoute","AuthorizationStatus","TIMEOUT_SHOW_ERROR","errorHandle","dropToken","saveDataUser","saveToken","loadComments","loadCurrentFilm","loadFavoriteFilms","loadAllFilms","loadMoreLikeFilms","loadPromoFilm","redirectToRoute","requireAuthorization","setError","clearErrorAction","setTimeout","dispatch","checkAuthAction","get","Login","Auth","error","NoAuth","loginAction","login","email","password","data","post","token","JSON","stringify","Main","logoutAction","delete","Logout","fetchFilmsAction","Films","fetchCurrentFilmsAction","id","fetchShowMoreFilmsAction","fetchFavoriteFilmsAction","Favorite","fetchPromoAction","Promo","fetchCommentsAction","Comments","addCommentsAction","dataComment","addFilmStatusAction","status"],"mappings":"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","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { api, store } from '.';\nimport { APIRoute, AppRoute, AuthorizationStatus, DataUser, TIMEOUT_SHOW_ERROR } from '../const';\nimport { errorHandle } from '../services/error-handle';\nimport { dropToken, saveDataUser, saveToken } from '../services/token';\nimport { AuthData, Comment, FilmStatus\n} from '../types';\nimport {\n  loadComments,\n  loadCurrentFilm,\n  loadFavoriteFilms,\n  loadAllFilms,\n  loadMoreLikeFilms,\n  loadPromoFilm,\n  redirectToRoute,\n  requireAuthorization,\n  setError\n} from './action';\n\nexport const clearErrorAction = createAsyncThunk(\n  'film/clearError',\n  () => {\n    setTimeout(\n      () => store.dispatch(setError('')),\n      TIMEOUT_SHOW_ERROR,\n    );\n  },\n);\n\nexport const checkAuthAction = createAsyncThunk(\n  'user/checkAuth',\n  async () => {\n    try{\n      await api.get(APIRoute.Login);\n      store.dispatch(requireAuthorization(AuthorizationStatus.Auth));\n    }catch(error){\n      errorHandle(error);\n      store.dispatch(requireAuthorization(AuthorizationStatus.NoAuth));\n    }\n  },\n);\n\nexport const loginAction = createAsyncThunk(\n  'user/login',\n  async ({login: email, password}: AuthData) => {\n    try {\n      const {data} = await api.post<DataUser>(APIRoute.Login, {email, password});\n      saveToken(data.token);\n      saveDataUser(JSON.stringify(data));\n      store.dispatch(requireAuthorization(AuthorizationStatus.Auth));\n      store.dispatch(redirectToRoute(AppRoute.Main));\n    } catch (error) {\n      errorHandle(error);\n      store.dispatch(requireAuthorization(AuthorizationStatus.NoAuth));\n    }\n  },\n);\n\nexport const logoutAction = createAsyncThunk(\n  'user/logout',\n  async () => {\n    try{\n      await api.delete(APIRoute.Logout);\n      dropToken();\n      store.dispatch(requireAuthorization(AuthorizationStatus.NoAuth));\n    }catch(error){\n      errorHandle(error);\n    }\n  },\n);\n\nexport const fetchFilmsAction = createAsyncThunk(\n  'films/fetchFilms',\n  async () => {\n    try{\n      const {data} = await api.get(APIRoute.Films);\n      store.dispatch(loadAllFilms(data));\n    }catch(error){\n      errorHandle(error);\n    }\n  },\n);\n\nexport const fetchCurrentFilmsAction = createAsyncThunk(\n  'film/fetchFilm',\n  async (id: number) => {\n    try{\n      const {data} = await api.get(`${APIRoute.Films}/${id}`);\n      store.dispatch(loadCurrentFilm(data));\n    }catch(error){\n      errorHandle(error);\n    }\n  },\n);\n\nexport const fetchShowMoreFilmsAction = createAsyncThunk(\n  'films/fetchShowMoreFilms',\n  async(id: number) => {\n    try{\n      const {data} = await api.get(`${APIRoute.Films}/${id}/similar`);\n      store.dispatch(loadMoreLikeFilms(data));\n    }catch(error){\n      errorHandle(error);\n    }\n  },\n);\n\nexport const fetchFavoriteFilmsAction = createAsyncThunk(\n  'films/fetchFavoriteFilms',\n  async() => {\n    try{\n      const {data} = await api.get(APIRoute.Favorite);\n      store.dispatch(loadFavoriteFilms(data));\n    }catch(error){\n      errorHandle(error);\n    }\n  },\n);\n\n\nexport const fetchPromoAction = createAsyncThunk(\n  'film/fetchPromo',\n  async () => {\n    try{\n      const {data} = await api.get(APIRoute.Promo);\n      store.dispatch(loadPromoFilm(data));\n    }catch(error){\n      errorHandle(error);\n    }\n  },\n);\n\nexport const fetchCommentsAction = createAsyncThunk(\n  'comments/fetchComments',\n  async (id: number) => {\n    try{\n      const {data} = await api.get(`${APIRoute.Comments}/${id}`);\n      store.dispatch(loadComments(data));\n    }catch(error){\n      errorHandle(error);\n    }\n  },\n);\n\nexport const addCommentsAction = createAsyncThunk(\n  'comments/addComments',\n  async ({id, dataComment}: Comment ) => {\n    try{\n      await api.post<Comment>(`${APIRoute.Comments}/${id}`, dataComment);\n      store.dispatch(redirectToRoute(`${APIRoute.Films}/${id}`));\n    }catch(error){\n      errorHandle(error);\n      store.dispatch(requireAuthorization(AuthorizationStatus.NoAuth));\n    }\n  },\n);\n\n\nexport const addFilmStatusAction = createAsyncThunk(\n  'film/addFilmStatus',\n  async ({id,status}: FilmStatus) => {\n    try{\n      await api.post<FilmStatus>(`${APIRoute.Favorite}/${id}/${status}`);\n    }catch(error){\n      errorHandle(error);\n    }\n  },\n);\n"]},"metadata":{},"sourceType":"module"}