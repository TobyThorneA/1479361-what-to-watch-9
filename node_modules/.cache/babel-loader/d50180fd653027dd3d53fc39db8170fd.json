{"ast":null,"code":"import request from'axios';import{HTTP_CODE}from'../const';import{store}from'../store';import{setError}from'../store/action';import{clearErrorAction}from'../store/api-action';export var errorHandle=function errorHandle(error){if(!request.isAxiosError(error)){throw error;}var handleError=function handleError(message){store.dispatch(setError(message));store.dispatch(clearErrorAction());};var response=error.response;if(response){switch(response.status){case HTTP_CODE.BAD_REQUEST:handleError(response.data.error);break;case HTTP_CODE.NOT_FOUND:handleError(response.data.error);break;case HTTP_CODE.UNAUTHORIZED:handleError(response.data.error);break;}}};","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Вячеслав/Projects/1479361-what-to-watch-9/src/services/error-handle.ts"],"names":["request","HTTP_CODE","store","setError","clearErrorAction","errorHandle","error","isAxiosError","handleError","message","dispatch","response","status","BAD_REQUEST","data","NOT_FOUND","UNAUTHORIZED"],"mappings":"AAAA,MAAOA,CAAAA,OAAP,KAAoB,OAApB,CACA,OAASC,SAAT,KAA0B,UAA1B,CACA,OAASC,KAAT,KAAsB,UAAtB,CACA,OAASC,QAAT,KAAyB,iBAAzB,CACA,OAASC,gBAAT,KAAiC,qBAAjC,CAGA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAA4B,CACrD,GAAG,CAACN,OAAO,CAACO,YAAR,CAAqBD,KAArB,CAAJ,CAAgC,CAC9B,KAAMA,CAAAA,KAAN,CACD,CAGD,GAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,OAAD,CAAqB,CACvCP,KAAK,CAACQ,QAAN,CAAeP,QAAQ,CAACM,OAAD,CAAvB,EACAP,KAAK,CAACQ,QAAN,CAAeN,gBAAgB,EAA/B,EACD,CAHD,CAKA,GAAOO,CAAAA,QAAP,CAAmBL,KAAnB,CAAOK,QAAP,CAEA,GAAGA,QAAH,CAAa,CACX,OAAOA,QAAQ,CAACC,MAAhB,EACE,IAAKX,CAAAA,SAAS,CAACY,WAAf,CACEL,WAAW,CAACG,QAAQ,CAACG,IAAT,CAAcR,KAAf,CAAX,CACA,MACF,IAAKL,CAAAA,SAAS,CAACc,SAAf,CACEP,WAAW,CAACG,QAAQ,CAACG,IAAT,CAAcR,KAAf,CAAX,CACA,MACF,IAAKL,CAAAA,SAAS,CAACe,YAAf,CACER,WAAW,CAACG,QAAQ,CAACG,IAAT,CAAcR,KAAf,CAAX,CACA,MATJ,CAWD,CACF,CA1BM","sourcesContent":["import request from 'axios';\nimport { HTTP_CODE } from '../const';\nimport { store } from '../store';\nimport { setError } from '../store/action';\nimport { clearErrorAction } from '../store/api-action';\nimport { ErrorType } from '../types';\n\nexport const errorHandle = (error: ErrorType): void => {\n  if(!request.isAxiosError(error)){\n    throw error;\n  }\n\n\n  const handleError = (message: string) => {\n    store.dispatch(setError(message));\n    store.dispatch(clearErrorAction());\n  };\n\n  const {response} = error;\n\n  if(response) {\n    switch(response.status){\n      case HTTP_CODE.BAD_REQUEST:\n        handleError(response.data.error);\n        break;\n      case HTTP_CODE.NOT_FOUND:\n        handleError(response.data.error);\n        break;\n      case HTTP_CODE.UNAUTHORIZED:\n        handleError(response.data.error);\n        break;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}