{"ast":null,"code":"import{Navigate}from'react-router-dom';import{AppRoute,AuthorizationStatus}from'../../const';import{jsx as _jsx}from\"react/jsx-runtime\";function PrivateRoute(props){var authorizationStatus=props.authorizationStatus,children=props.children;return authorizationStatus===AuthorizationStatus.Auth?children:/*#__PURE__*/_jsx(Navigate,{to:AppRoute.SignIn});}function PrivateRouteAuthUser(props){var authorizationStatus=props.authorizationStatus,children=props.children;return authorizationStatus===AuthorizationStatus.NoAuth?children:/*#__PURE__*/_jsx(Navigate,{to:AppRoute.Main});}export{PrivateRoute,PrivateRouteAuthUser};","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Вячеслав/Projects/1479361-what-to-watch-9/project/src/components/private-route/private-route.tsx"],"names":["Navigate","AppRoute","AuthorizationStatus","PrivateRoute","props","authorizationStatus","children","Auth","SignIn","PrivateRouteAuthUser","NoAuth","Main"],"mappings":"AAAA,OAAQA,QAAR,KAAuB,kBAAvB,CAEA,OAAQC,QAAR,CAAkBC,mBAAlB,KAA4C,aAA5C,C,2CAOA,QAASC,CAAAA,YAAT,CAAsBC,KAAtB,CAAgD,CAC9C,GAAOC,CAAAA,mBAAP,CAAwCD,KAAxC,CAAOC,mBAAP,CAA4BC,QAA5B,CAAwCF,KAAxC,CAA4BE,QAA5B,CAEA,MACED,CAAAA,mBAAmB,GAAKH,mBAAmB,CAACK,IAA5C,CACID,QADJ,cAGE,KAAC,QAAD,EACE,EAAE,CAAEL,QAAQ,CAACO,MADf,EAJJ,CAQD,CAED,QAASC,CAAAA,oBAAT,CAA8BL,KAA9B,CAAwD,CACtD,GAAOC,CAAAA,mBAAP,CAAwCD,KAAxC,CAAOC,mBAAP,CAA4BC,QAA5B,CAAwCF,KAAxC,CAA4BE,QAA5B,CAEA,MACED,CAAAA,mBAAmB,GAAKH,mBAAmB,CAACQ,MAA5C,CACIJ,QADJ,cAGE,KAAC,QAAD,EACE,EAAE,CAAEL,QAAQ,CAACU,IADf,EAJJ,CAQD,CAED,OAASR,YAAT,CAAuBM,oBAAvB","sourcesContent":["import {Navigate} from 'react-router-dom';\nimport {RouteProps} from 'react-router-dom';\nimport {AppRoute, AuthorizationStatus} from '../../const';\n\ntype PrivateRouteProps = RouteProps & {\n  authorizationStatus: AuthorizationStatus;\n  children: JSX.Element;\n}\n\nfunction PrivateRoute(props: PrivateRouteProps) {\n  const {authorizationStatus, children} = props;\n\n  return (\n    authorizationStatus === AuthorizationStatus.Auth\n      ? children\n      :\n      <Navigate\n        to={AppRoute.SignIn}\n      />\n  );\n}\n\nfunction PrivateRouteAuthUser(props: PrivateRouteProps) {\n  const {authorizationStatus, children} = props;\n\n  return (\n    authorizationStatus === AuthorizationStatus.NoAuth\n      ? children\n      :\n      <Navigate\n        to={AppRoute.Main}\n      />\n  );\n}\n\nexport  {PrivateRoute, PrivateRouteAuthUser};\n"]},"metadata":{},"sourceType":"module"}