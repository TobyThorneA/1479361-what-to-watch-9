{"ast":null,"code":"import request from 'axios';\nimport { HTTP_CODE } from '../const';\nimport { store } from '../store';\nimport { setError } from '../store/action';\nimport { clearErrorAction } from '../store/api-action';\nexport const errorHandle = error => {\n  if (!request.isAxiosError(error)) {\n    throw error;\n  }\n\n  const handleError = message => {\n    store.dispatch(setError(message));\n    store.dispatch(clearErrorAction());\n  };\n\n  const {\n    response\n  } = error;\n\n  if (response) {\n    switch (response.status) {\n      case HTTP_CODE.BAD_REQUEST:\n        handleError(response.data.error);\n        break;\n\n      case HTTP_CODE.NOT_FOUND:\n        handleError(response.data.error);\n        break;\n\n      case HTTP_CODE.UNAUTHORIZED:\n        handleError(response.data.error);\n        break;\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Вячеслав/Projects/1479361-what-to-watch-9/src/services/error-handle.ts"],"names":["request","HTTP_CODE","store","setError","clearErrorAction","errorHandle","error","isAxiosError","handleError","message","dispatch","response","status","BAD_REQUEST","data","NOT_FOUND","UNAUTHORIZED"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AAGA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAA4B;AACrD,MAAG,CAACN,OAAO,CAACO,YAAR,CAAqBD,KAArB,CAAJ,EAAgC;AAC9B,UAAMA,KAAN;AACD;;AAGD,QAAME,WAAW,GAAIC,OAAD,IAAqB;AACvCP,IAAAA,KAAK,CAACQ,QAAN,CAAeP,QAAQ,CAACM,OAAD,CAAvB;AACAP,IAAAA,KAAK,CAACQ,QAAN,CAAeN,gBAAgB,EAA/B;AACD,GAHD;;AAKA,QAAM;AAACO,IAAAA;AAAD,MAAaL,KAAnB;;AAEA,MAAGK,QAAH,EAAa;AACX,YAAOA,QAAQ,CAACC,MAAhB;AACE,WAAKX,SAAS,CAACY,WAAf;AACEL,QAAAA,WAAW,CAACG,QAAQ,CAACG,IAAT,CAAcR,KAAf,CAAX;AACA;;AACF,WAAKL,SAAS,CAACc,SAAf;AACEP,QAAAA,WAAW,CAACG,QAAQ,CAACG,IAAT,CAAcR,KAAf,CAAX;AACA;;AACF,WAAKL,SAAS,CAACe,YAAf;AACER,QAAAA,WAAW,CAACG,QAAQ,CAACG,IAAT,CAAcR,KAAf,CAAX;AACA;AATJ;AAWD;AACF,CA1BM","sourcesContent":["import request from 'axios';\nimport { HTTP_CODE } from '../const';\nimport { store } from '../store';\nimport { setError } from '../store/action';\nimport { clearErrorAction } from '../store/api-action';\nimport { ErrorType } from '../types';\n\nexport const errorHandle = (error: ErrorType): void => {\n  if(!request.isAxiosError(error)){\n    throw error;\n  }\n\n\n  const handleError = (message: string) => {\n    store.dispatch(setError(message));\n    store.dispatch(clearErrorAction());\n  };\n\n  const {response} = error;\n\n  if(response) {\n    switch(response.status){\n      case HTTP_CODE.BAD_REQUEST:\n        handleError(response.data.error);\n        break;\n      case HTTP_CODE.NOT_FOUND:\n        handleError(response.data.error);\n        break;\n      case HTTP_CODE.UNAUTHORIZED:\n        handleError(response.data.error);\n        break;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}